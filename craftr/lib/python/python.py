
import craftr
import re
from craftr import path, sh

# TODO: (On Linux), building a frozen executable with a Python version
#       from a virtualenv gives (at least with Python 3) an error in
#       site.py:virtual_install_main_packages().

# TODO: Invoke Makefile generated by the PyFreeze tool.


class PythonTargetHandler(craftr.TargetHandler):

  def get_common_property_scope(self):
    return 'python'

  def setup_target(self, target):
    target.define_property('python.freezePython', 'String', 'python', inheritable=False)
    target.define_property('python.freezeScript', 'String', inheritable=False)
    target.define_property('python.freezeModules', 'StringList', inheritable=False)

  def finalize_target(self, target, data):
    src_dir = target.directory()
    build_dir = path.join(context.build_directory, target.module().name())
    if data.freezeScript:
      data.freezeScript = path.canonical(data.freezeScript, src_dir)
      data.freezeModules = [path.canonical(x, src_dir) for x in data.freezeModules]
      data.outputDirectory = path.join(build_dir, target.name() + '-freeze')

      s = sh.check_output(sh.split(data.freezePython) + ['--version'],
        stderr=sh.STDOUT).decode()
      data.pythonVersion = re.search('Python\s+(\d+)\.\d+\.\d+', s).group(1)
      if data.pythonVersion not in ('2', '3'):
        raise EnvironmentError('That Python version looks weird, man.')

  def translate_target(self, target, data):
    if data.freezeScript:
      if data.pythonVersion == '2':
        freeze = path.join(path.dir(__file__), 'Tools', 'freeze-2.7', 'freeze.py')
      elif data.pythonVersion == '3':
        freeze = path.join(path.dir(__file__), 'Tools', 'freeze-3.6', 'freeze.py')
      else: assert False
      command = sh.split(data.freezePython) + [freeze]
      command += ['-o', data.outputDirectory]
      command += ['$in']
      action = target.add_action('python.freezeGen', commands=[command])
      build = action.add_buildset()
      build.files.add(data.freezeScript, ['in'])
      build.files.add(data.freezeModules, ['in'])
      build.files.add(data.outputDirectory, ['out'])


module.register_target_handler(PythonTargetHandler())
