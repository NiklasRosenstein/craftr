project "craftr/tools/download"
eval:>>

import nr.fs
import posixpath
import re
import requests
import tarfile
import zipfile
import {root as build_cache} from 'craftr/tools/cache'


def get_source_archive(url):
  """
  Downloads an archive from the specified *URL* and extracts it. Returns the
  path to the unpacked directory.
  """

  archive_cache = build_cache.setdefault('craftr/tools/download', {})
  directory = archive_cache.get(url)
  if directory and path.isdir(directory):
    return directory

  filename = posixpath.basename(url)
  response = requests.get(url, stream=True)
  if 'Content-Disposition' in response.headers:
    hdr = response.headers['Content-Disposition']
    filename = re.findall("filename=(.+)", hdr)[0]

  directory = path.join(context.build_directory, '.source-downloads', path.rmvsuffix(filename))

  print('Downloading {} ...'.format(url))
  response.raise_for_status()
  with nr.fs.tempfile(suffix=filename) as fp:
    for chunk in response.iter_content(16*1024):
      fp.write(chunk)
    fp.close()
    path.makedirs(directory)
    print('Extracting to {} ...'.format(directory))
    if filename.endswith('.zip'):
      with zipfile.ZipFile(fp.name) as zipf:
        zipf.extractall(directory)
    else:
      with tarfile.open(fp.name) as tarf:
        tarf.extractall(directory)

  archive_cache[url] = directory
  return directory
