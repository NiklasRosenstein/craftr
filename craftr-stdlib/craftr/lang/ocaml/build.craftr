project "craftr/lang/ocaml" v1.0.0
eval:>>

import craftr from 'craftr'

if OS.type == 'nt':
  exe_suffix = '.exe'
else:
  exe_suffix = ''


class OcamlTargetHandler(craftr.TargetHandler):

  def init(self, context):
    props = context.target_properties
    props.add('ocaml.srcs', craftr.PathList, options={'inherit': True})
    props.add('ocaml.standalone', craftr.Bool)
    props.add('ocaml.productName', craftr.String)
    props.add('ocaml.compilerFlags', craftr.StringList, options={'inherit': True})

  def translate_target(self, target):
    src_dir = target.directory
    build_dir = path.join(context.build_directory, target.module.name)
    data = target.get_props('ocaml.', as_object=True)

    if not data.productName:
      data.productName = target.name + '-' + target.module.version
    if data.srcs:
      data.productFilename = path.join(build_dir, data.productName)
      if data.standalone:
        data.productFilename += exe_suffix
      else:
        data.productFilename += '.cma'

    if data.srcs:
      # Action to compile an executable.
      command = ['ocamlopt' if data.standalone else 'ocamlc']
      command += ['-o', '$out', '$in']
      action = target.add_action('ocaml.compile', commands=[command])
      build = action.add_buildset()
      build.files.add(data.srcs, ['in'])
      build.files.add(data.productFilename, ['out', 'exe'])

      # Action to run the executable.
      command = [data.productFilename]
      action = target.add_action('ocaml.run', commands=[command],
        explicit=True, syncio=True, output=False)
      action.add_buildset()


context.register_handler(OcamlTargetHandler())
