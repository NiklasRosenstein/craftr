
import nodepy
import os
import re
import subprocess

import {Writer as NinjaWriter} from './ninja_syntax'


def quote(s, for_ninja=False):
  """
  Enhanced implementation of :func:`shlex.quote` as it generates single-quotes
  on Windows which can lead to problems.
  """

  if os.name == 'nt' and os.sep == '\\':
    s = s.replace('"', '\\"')
    if re.search('\s', s) or any(c in s for c in '<>'):
      s = '"' + s + '"'
  else:
    s = shlex.quote(s)
  if for_ninja:
    # Fix escaped $ variables on Unix, see issue craftr-build/craftr#30
    s = re.sub(r"'(\$\w+)'", r'\1', s)
  return s


def make_rule_name(graph, node):
  return re.sub('[^\d\w\-_\.]+', '_', node.name) + '_' + graph.hash(node)


def prepare_build(build_directory, graph):
  build_file = os.path.join(build_directory, 'build.ninja')
  print('note: writing "{}"'.format(build_file))
  with open(build_file, 'w') as fp:
    writer = NinjaWriter(fp)
    writer.comment('This file was automatically generated by Craftr')
    writer.comment('It is not recommended to edit this file manually.')
    writer.newline()

    # writer.variable('msvc_deps_prefix')  # TODO
    writer.variable('nodepy_exec_args', ' '.join(map(quote, nodepy.runtime.exec_args)))
    writer.newline()

    for node in sorted(graph.nodes(), key=lambda x: x.name):
      phony_name = make_rule_name(graph, node)
      rule_name = 'rule_' + phony_name

      command = [
        '$nodepy_exec_args',
        str(require.resolve('craftr/main').filename),
        '--build-directory', build_directory,
        '--run-build-node', node.name,
        '--cwd', os.getcwd()
      ]
      writer.rule(rule_name, command, description=node.name)

      deps = [make_rule_name(graph, graph[x]) for x in node.deps] + list(node.input_files)
      outputs = list(node.output_files)

      writer.build(outputs or [phony_name] , rule_name, deps)
      if outputs:
        writer.build([phony_name], 'phony', node.output_files)
      writer.newline()


def build(build_directory, graph, args):
  command = ['ninja'] + list(args)
  subprocess.run(command, cwd=build_directory)


def clean(build_directory, graph, args):
  command = ['ninja', '-t', 'clean'] + list(args)
  subprocess.run(command, cwd=build_directory)
