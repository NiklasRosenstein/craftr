# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import nr.fs

from craftr.api import *
from craftr.api import proplib
from nr.stream import stream


session.target_props.add('cxx.type', proplib.String)
session.target_props.add('cxx.srcs', proplib.PathList)
session.target_props.add('cxx.objs', proplib.PathList)
session.target_props.add('cxx.includes', proplib.PathList, options={'inherit': True})
session.target_props.add('cxx.outStaticLibs', proplib.PathList, options={'inherit': True})
session.target_props.add('cxx.outSharedLibs', proplib.PathList, options={'inherit': True})
session.target_props.add('cxx.outExecutables', proplib.PathList, options={'inherit': True})


def build():
  target = current_target()
  srcs = target['cxx.srcs']
  objs = target['cxx.objs']
  complete_list_with(objs, srcs, lambda x: chfdir(nr.fs.setsuffix(x, '.o')))

  operator(
    name = 'cxx.compile',
    commands = [['gcc', '-I$includes', '-c', '$<srcs', '-o', '$@objs']],
    variables = {'includes': target['cxx.includes']}
  )

  for src, obj in zip(srcs, objs):
    build_set({'srcs': [src]}, {'objs': [obj]}, description='Compile $@objs')

  type = target.properties['cxx.type']
  if type in ('executable', 'sharedLibrary'):
    cmd = ['gcc', '$<objs', '-o', '$@binary', '$<inputLibs']
    if type == 'sharedLibrary':
      binaryExt = '.so'
      cmd += ['-shared']
    else:
      binaryExt = ''
  elif type == 'staticLibrary':
    binaryExt = '.a'
    cmd = ['ar', '-rcs', '$@binary', '$<objs']
  else:
    raise ValueError('type: {!r}'.format(type))

  input_libs = target['cxx.outStaticLibs']
  binary = chfdir('main' + binaryExt)
  operator('cxx.link', [cmd])
  build_set({'objs': objs, 'inputLibs': input_libs}, {'binary': binary})


  if type == 'staticLibrary':
    target = '@cxx.outStaticLibs+'
  elif type == 'sharedLibrary':
    target = '@cxx.outSharedLibs+'
  elif type == 'executable':
    target = '@cxx.outExecutables+'
  properties({target: [binary]})
