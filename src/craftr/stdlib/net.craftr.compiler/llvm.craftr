# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Detect LLVM installation on your system.
"""

import os
import {get_gcc_info} from './mingw'
from nr.types import named

project('net.craftr.compiler.llvm', '1.0-0')
options.add('installDirectory', str, '')


class InvalidLlvmInstallation(Exception):
  pass


class LlvmInstallation(named.Named):
  directory: str
  environ: dict

  _llvm_info = None

  def __init__(self, directory):
    bindir = path.join(directory, 'bin')
    if not path.isdir(bindir):
      raise InvalidLlvmInstallation(directory)
    environ = {'PATH': bindir + path.pathsep + os.environ['PATH']}
    super().__init__(directory, environ)

  @property
  def llvm_info(self):
    if not self._llvm_info:
      self._llvm_info = get_gcc_info('clang', self.environ)
    return self._llvm_info

  @property
  def target(self):
    return self.llvm_info['target']

  @property
  def version(self):
    return self.llvm_info['version']

  @property
  def has_clang_cl(self):
    return path.isfile(path.join(self.directory, 'bin', 'clang-cl.exe'))

  @classmethod
  def iter_installations(cls):
    try_directories = []
    if options.installDirectory:
      try_directories.append(options.installDirectory)
    if OS.id == 'win32':
      try_directories.append('C:\\Program Files\\LLVM')
    result = []
    for directory in try_directories:
      try:
        yield cls(directory)
      except InvalidLlvmInstallation:
        pass
    return result

  @classmethod
  def list(cls):
    return list(cls.iter_installations())


def main(argv=None, prog=None):
  for inst in LlvmInstallation.iter_installations():
    print('- Version:', inst.version)
    print('  Target:', inst.target)
    print('  Has clang-cl:', inst.has_clang_cl)
    print('  Directory:', inst.directory)
    print()
