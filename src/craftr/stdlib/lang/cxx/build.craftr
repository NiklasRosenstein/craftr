
from craftr.api import *
from craftr.api import proplib
from nr.stream import stream

session.target_props.add('cxx.type', proplib.String)
session.target_props.add('cxx.srcs', proplib.FileSetList)
session.target_props.add('cxx.objs', proplib.FileSetList)
session.target_props.add('cxx.includes', proplib.PathList, options={'inherit': True})
session.target_props.add('cxx.outStaticLibs', proplib.FileSetList, options={'inherit': True})
session.target_props.add('cxx.outSharedLibs', proplib.FileSetList, options={'inherit': True})
session.target_props.add('cxx.outExecutables', proplib.FileSetList, options={'inherit': True})


def build():
  target = current_target()

  srcs = join_file_sets(target['cxx.srcs'])
  objs = join_file_sets(target['cxx.objs'])
  objs.fill_for(srcs, lambda x: chfdir(x + '.o'))
  bset = build_set({'srcs': srcs}, {'objs': objs})

  op = create_operator(
    name='cxx.compile',
    commands=[['gcc', '-I$includes', '-c', '$<srcs', '-o', '$@objs']],
    for_each=True,
    variables={'includes': target['cxx.includes']}
  )

  objs = extract_file_set('objs', op.build_sets)
  input_libs = join_file_sets(target['cxx.outStaticLibs'])

  type = target.properties['cxx.type']
  if type in ('executable', 'sharedLibrary'):
    cmd = ['gcc', '$<objs', '-o', '$@binary', '$<inputLibs']
    if type == 'sharedLibrary':
      binaryExt = '.so'
      cmd += ['-shared']
    else:
      binaryExt = ''
  elif type == 'staticLibrary':
    binaryExt = '.a'
    cmd = ['ar', '-rcs', '$@binary', '$<objs']
  else:
    raise ValueError('type: {!r}'.format(type))

  binary = chfdir('main' + binaryExt)
  bset = build_set({'objs': objs, 'inputLibs': input_libs}, {'binary': file_set([binary])})
  op = create_operator(
    name='cxx.link',
    commands=[cmd]
  )

  if type == 'staticLibrary':
    target = '@cxx.outStaticLibs+'
  elif type == 'sharedLibrary':
    target = '@cxx.outSharedLibs+'
  elif type == 'executable':
    target = '@cxx.outExecutables+'
  properties({target: [extract_file_set('binary', op.build_sets)]})
