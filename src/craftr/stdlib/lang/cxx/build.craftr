
import nr.fs

from craftr.api import *
from craftr.api import proplib
from nr.stream import stream


session.target_props.add('cxx.type', proplib.String)
session.target_props.add('cxx.srcs', proplib.PathList)
session.target_props.add('cxx.objs', proplib.PathList)
session.target_props.add('cxx.includes', proplib.PathList, options={'inherit': True})
session.target_props.add('cxx.outStaticLibs', proplib.PathList, options={'inherit': True})
session.target_props.add('cxx.outSharedLibs', proplib.PathList, options={'inherit': True})
session.target_props.add('cxx.outExecutables', proplib.PathList, options={'inherit': True})


def build():
  target = current_target()
  srcs = target['cxx.srcs']
  objs = target['cxx.objs']
  complete_list_with(objs, srcs, lambda x: chfdir(nr.fs.setsuffix(x, '.o')))

  operator(
    name = 'cxx.compile',
    commands = [['gcc', '-I$includes', '-c', '$<srcs', '-o', '$@objs']],
    variables = {'includes': target['cxx.includes']}
  )

  for src, obj in zip(srcs, objs):
    build_set({'srcs': [src]}, {'objs': [obj]}, description='Compile $@objs')

  type = target.properties['cxx.type']
  if type in ('executable', 'sharedLibrary'):
    cmd = ['gcc', '$<objs', '-o', '$@binary', '$<inputLibs']
    if type == 'sharedLibrary':
      binaryExt = '.so'
      cmd += ['-shared']
    else:
      binaryExt = ''
  elif type == 'staticLibrary':
    binaryExt = '.a'
    cmd = ['ar', '-rcs', '$@binary', '$<objs']
  else:
    raise ValueError('type: {!r}'.format(type))

  input_libs = target['cxx.outStaticLibs']
  binary = chfdir('main' + binaryExt)
  operator('cxx.link', [cmd])
  build_set({'objs': objs, 'inputLibs': input_libs}, {'binary': binary})


  if type == 'staticLibrary':
    target = '@cxx.outStaticLibs+'
  elif type == 'sharedLibrary':
    target = '@cxx.outSharedLibs+'
  elif type == 'executable':
    target = '@cxx.outExecutables+'
  properties({target: [binary]})
