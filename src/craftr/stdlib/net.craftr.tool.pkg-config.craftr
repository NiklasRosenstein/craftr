# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

project(module.name, '1.0-0')

import cxx from 'net.craftr.lang.cxx'
from craftr.utils import sh


class PkgConfigError(Exception):
  pass


def pkg_config(pkg_names, static=True, target=None):
  """
  This function runs the `pkg-config` command with the specified *pkg_name*
  and appends values to the targets public properties.

  The information retrieved by this function can be overwritten using the
  session's options. Before the `pkg-config` command is run, this function
  will check if there exists a `pkg-config:PKGNAME` option. If there is, it
  must be a dictionary, the path to a JSON file or a GCC-style command-line
  (even when a non-GCC compiler is currently used).

  The following keys are supported in the JSON file or dictionary mode:

  * includes
  * defines
  * syslibs
  * libpath
  * cflags
  * ldflags
  """

  target = target or current_target()

  if isinstance(pkg_names, str):
    pkg_names = [pkg_names]

  includes = []
  defines = []
  syslibs = []
  libpath = []
  compile_flags = []
  link_flags = []

  flags = []
  skip = set()
  for pkg in pkg_names:
    override = session.options.get('pkg-config:' + pkg)
    if override is None: continue
    if isinstance(override, str):
      if override.endswith('.json'):
        with open(override) as fp:
          override = json.load(fp)
      else:
        flags += sh.split(override)
    if isinstance(override, dict):
      includes += data.get('includes', [])
      defines += data.get('defines', [])
      syslibs += data.get('syslibs', [])
      libpath += data.get('libpath', [])
      compile_flags += data.get('compile_flags', [])
      link_flags += data.get('link_flags', [])
    elif not isinstance(override, str):
      print('[WARN]: Invalid option pkg-config:{} = {!r}'.format(pkg, override))
      continue
    skip.add(pkg)

  pkg_names = [x for x in pkg_names if x not in skip]
  if pkg_names:
    command = ['pkg-config'] + pkg_names + ['--cflags', '--libs']
    if static:
      command.append('--static')

    try:
      flags += sh.split(sh.check_output(command).decode())
    except FileNotFoundError as exc:
      raise PkgConfigError('pkg-config is not available ({})'.format(exc))
    except sh.CalledProcessError as exc:
      raise PkgConfigError('{} not installed on this system\n\n{}'.format(
          pkg_names, exc.stderr or exc.stdout))

  # Parse the flags.
  for flag in flags:
    if flag.startswith('-I'):
      includes.append(flag[2:])
    elif flag.startswith('-D'):
      defines.append(flag[2:])
    elif flag.startswith('-l'):
      syslibs.append(flag[2:])
    elif flag.startswith('-L'):
      libpath.append(flag[2:])
    elif flag.startswith('-Wl,'):
      link_flags.append(flag[4:])
    else:
      compile_flags.append(flag)

  properties(target, {
    '@+cxx.includes': includes,
    '@+cxx.defines': defines,
    '@+cxx.systemLibraries': syslibs,
    '@+cxx.libraryPaths': libpath,
    '@+cxx.compilerFlags': compile_flags,
    '@+cxx.linkerFlags': link_flags
  })


pkg_config.Error = PkgConfigError
