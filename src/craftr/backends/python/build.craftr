# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
A simplistic, non-parallel backend implemented in Python.
"""

project('craftr/backends/python', '1.0-0')

import errno
import os
import shutil

from craftr.core.build import execute
from nr.stream import stream

def _remove(p):
  if path.isdir(p):
    shutil.rmtree(p)
  else:
    os.remove(p)


def export():
  pass


def clean(build_sets, recursive, verbose):
  seen = set()
  queue = list(build_sets)
  files_to_remove = []
  while queue:
    bset = queue.pop()
    if bset in seen: continue
    files_to_remove += stream.concat(bset.outputs.values())
    if recursive:
      queue += bset.get_input_build_sets()
  print('Cleaning {} file(s) ...'.format(len(files_to_remove)))
  for x in files_to_remove:
    if verbose:
      print('  {}'.format(x), end='')
    try:
      _remove(x)
      if verbose:
        print(' [OK]')
    except OSError as exc:
      if verbose:
        print(' [{}]'.format(errno.errorcode.get(exc.errno, '???')))


def build(build_sets, verbose):
  print()
  print('======= BUILD')
  print()
  execute(session, build_sets)
